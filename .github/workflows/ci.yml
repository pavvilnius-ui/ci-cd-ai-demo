name: CI/CD AI Demo

on:
  pull_request:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      tests_failed: ${{ steps.set_test_result.outputs.tests_failed }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest

      - name: Run tests and save logs
        id: run_tests
        run: |
          PYTHONPATH=$(pwd) pytest tests/ --maxfail=1 --disable-warnings -q > failed_pipeline.log || echo "failed=true" >> $GITHUB_ENV

      - name: Set test result output
        id: set_test_result
        run: |
          if [[ "${{ env.failed }}" == "true" ]]; then
            echo "tests_failed=true" >> $GITHUB_OUTPUT
          else
            echo "tests_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: failed-pipeline-log
          path: failed_pipeline.log

      - name: Send logs to Grafana Loki
        if: always()
        env:
          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
        run: |
          jq -R -s '{ streams: [ { stream: {job:"ci-cd-ai-demo"}, values: [ [ "\(now | todateiso8601)", . ] ] } ] }' failed_pipeline.log > loki.json
          curl -s -H "Content-Type: application/json" \
               -H "Authorization: Bearer $GRAFANA_API_KEY" \
               -X POST \
               --data-binary @loki.json \
               https://pavvilnius.grafana.net/loki/api/v1/push

  ai-assistant:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai

      - name: Download logs
        uses: actions/download-artifact@v4
        with:
          name: failed-pipeline-log
          path: .

      - name: Run AI Assistant
        id: ai_assistant
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          if [[ "${{ needs.build-and-test.outputs.tests_failed }}" == "true" ]]; then
              python scripts/ai_assistant.py > ai_output.log
              echo "❌ The following test failures were detected and analyzed by AI Assistant:" | cat - ai_output.log > temp.log && mv temp.log ai_output.log
          else
              echo "✅ All tests passed. PR can be merged!" > ai_output.log
          fi
          cat ai_output.log

      - name: Post PR comment
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const fs = require('fs');
            const commentBody = fs.readFileSync('ai_output.log', 'utf8');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: commentBody
            });
