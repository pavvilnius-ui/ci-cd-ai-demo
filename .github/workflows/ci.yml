name: CI/CD AI Demo

on:
  pull_request:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      tests_failed: ${{ steps.set_test_result.outputs.tests_failed }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - run: |
          python -m pip install --upgrade pip
          pip install pytest

      - name: Run tests and create logs
        run: |
          # Run pytest without failing workflow
          PYTHONPATH=$(pwd) pytest tests/ --maxfail=1 --disable-warnings -q | awk '{
            if (/FAILED/) print "FAILED";
            else if (/PASSED/) print "PASSED";
          }' > failed_pipeline.log || true

          # Ensure at least one line
          if [[ ! -s failed_pipeline.log ]]; then
            echo "PASSED" > failed_pipeline.log
          fi

          # Set output flag
          if grep -q "FAILED" failed_pipeline.log; then
            echo "tests_failed=true" >> $GITHUB_OUTPUT
          else
            echo "tests_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Push logs to Loki
        env:
          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
        run: |
          BUILD_ID=$(date +%s)
          VALUES=$(awk -v now=$(date +%s) '{ts=now*1000000000; printf "[\"%d\",\"%s\"],", ts, $0}' failed_pipeline.log | sed 's/,$//')
          cat <<EOF > loki.json
          {
            "streams": [
              {
                "stream": { "job": "ci-cd-demo", "build_id": "$BUILD_ID" },
                "values": [ $VALUES ]
              }
            ]
          }
          EOF
          curl -sf -H "Content-Type: application/json" \
               -u "1330599:${GRAFANA_API_KEY}" \
               -X POST \
               --data-binary @loki.json \
               https://logs-prod-036.grafana.net/loki/api/v1/push

  ai-assistant:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - run: python -m pip install --upgrade pip && pip install openai
      - uses: actions/download-artifact@v4
        with:
          name: failed-pipeline-log
          path: .
      - name: AI comment
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          if [[ "${{ needs.build-and-test.outputs.tests_failed }}" == "true" ]]; then
              python scripts/ai_assistant.py > ai_output.log
              echo "❌ Test failures detected:" | cat - ai_output.log > temp.log && mv temp.log ai_output.log
          else
              echo "✅ All tests passed!" > ai_output.log
          fi
          cat ai_output.log
      - name: Post PR comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const fs = require('fs');
            const commentBody = fs.readFileSync('ai_output.log', 'utf8');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: commentBody
            });
